#Her bir kullanici icin almis oldugu her urunun bir sonraki alýnabilecegi gunu hesaplayan kod
#Gunler kumulatif

#Kodun calismasi uzun suruyor (1.5-2 dk performansa bagli), eger ciktilari alip kullanilmak
#istenirse son_hal isimli dataframe de duzgun sekilde mevcut

#Klasik import
trdata=read.csv("C:\\Users\\egemenisguder\\Desktop\\Market\\Train.csv")
tsdata=read.csv("C:\\Users\\egemenisguder\\Desktop\\Market\\Test.csv")
names=read.csv("C:\\Users\\egemenisguder\\Desktop\\Market\\Products.csv")

#Iki dosya icin de kullanici id leri unique olarak depolanir.
truserlist=unique(trdata$user_id)
tsuserlist=unique(tsdata$user_id)

#train icin kullanýlacak olan unique urun listesi
trproductlist=unique(trdata$product_id)

#Her bir kisi icin kullanilacak mini urun vektoru
productlistforperson=vector()

#Programda kullanýlan her satiri bir user ve her sutunu bir urunu temsil eden
#Kocaman matris ici 0
mymatrix=matrix(0,length(truserlist)  , length(trproductlist)  ) 
minmatrix=matrix(0,length(truserlist)  , length(trproductlist)  ) 
maxmatrix=matrix(0,length(truserlist)  , length(trproductlist)  ) 

for (i in (1:length(truserlist))){ 

#Her bit train kullanicisiicin once alinan tum urunler vektorde tutulur
productlistforperson<-c(unique(trdata$product_id[which(trdata$user_id==i)]))

for (j in productlistforperson){ 
#Listediki her bir urun icin alinan gunler vektore aktarilarak regresyon yapilir
try<-c(trdata$days_since_first_order[intersect(which(trdata$user_id==i),which(trdata$product_id==j)    )])
trx<-seq(0,length(try)-1)
trregress_data<-data.frame(try, trx)
a <- trregress_data$try
x <- trregress_data$trx
trlinearMod <- lm(a ~ x)

#Tahmin ancak uzunluk 2 den büyükse yani NULL ya da 0 bos degilse yapilir (Zaten degerler 
# 3 basamakli min)
if(length(try)>=2){
y_pred = predict(trlinearMod, data.frame(x = length(try)),interval="confidence") 

#Ornek 4 tane grafik bastirilir
if((i==1)&&(j==196)){
png(file = "product_regression.png")
par(mfrow = c(2, 2))
plot(trx,try,xlim=c(0, (length(try)+1)),ylim=c(0, (y_pred[[1]]+10)),col = "blue",main = "Regression For User:1 Product:196",
abline(trlinearMod),cex = 1.3,pch = 16,xlab = "Orders",ylab = "Days after first order")
points(length(try), y_pred[[1]], pch=8, col="red")
}
if((i==2)&&(j==47766)){
plot(trx,try,xlim=c(0, (length(try)+1)),ylim=c(0, (y_pred[[1]]+10)),col = "blue",main = "Regression For User:2 Product:47766",
abline(trlinearMod),cex = 1.3,pch = 16,xlab = "Orders",ylab = "Days after first order")
points(length(try), y_pred[[1]], pch=8, col="red")
dev.off()
} 
if((i==2)&&(j==32792)){
plot(trx,try,xlim=c(0, (length(try)+1)),ylim=c(0, (y_pred[[1]]+10)),col = "blue",main = "Regression For User:2 Product:32792",
abline(trlinearMod),cex = 1.3,pch = 16,xlab = "Orders",ylab = "Days after first order")
points(length(try), y_pred[[1]], pch=8, col="red")
} 
if((i==1)&&(j==10258)){
plot(trx,try,xlim=c(0, (length(try)+1)),ylim=c(0, (y_pred[[1]]+10)),col = "blue",main = "Regression For User:1 Product:10258",
abline(trlinearMod),cex = 1.3,pch = 16,xlab = "Orders",ylab = "Days after first order")
points(length(try), y_pred[[1]], pch=8, col="red")
} 
 

#Tahmin matrisin ilgili yerine yazilir
mymatrix[i,which(j == trproductlist)  ]<-y_pred[[1]]
if(!is.na(y_pred[[2]]) )
{
minmatrix[i,which(j == trproductlist)  ]<-y_pred[[2]]
maxmatrix[i,which(j == trproductlist)  ]<-y_pred[[3]]
}
else{
minmatrix[i,which(j == trproductlist)  ]<-y_pred[[1]]
maxmatrix[i,which(j == trproductlist)  ]<-y_pred[[1]]
}


}
}
}

#Gorsellestirme islemi icin kullanilacak bos vektorler olusturulur.
actuals<-vector()
predicteds<-vector()
lastuserlist<-vector()
pnames<-vector()
availableproductids<-vector()
lastmin<-vector()
lastmax<-vector()


#Tum train kullanicilari icin once testte karsiligi var mi diye bakilir
for (i in (1:length(truserlist))){ 
if(i %in% tsuserlist){

#Testte karsiligi varsa iki dosya icin de aldigi urunlere bakilir
productlistforperson<-c(unique(trdata$product_id[which(trdata$user_id==i)]))
tsproductlistforperson<-c(unique(tsdata$product_id[which(tsdata$user_id==i)]))
for (j in productlistforperson){ 

#aldigi urunlerde eslesme varsa
if(j %in% tsproductlistforperson){

#Matrisin o kisi ve o urun degeri bos degilse kontrolu
if(      mymatrix[i,which(j == trproductlist) ]!=0        ){

#Testteki gercek deger okunur
actuals<-append(actuals,tsdata$days_since_first_order[intersect(which(tsdata$user_id==i),which(tsdata$product_id==j)    )])

#Tahmin edilen deger, ilgili kullanici ve urun idleri vektorlere aktarilir.
predicteds<-append(predicteds,mymatrix[i,which(j == trproductlist) ])
lastuserlist<-append(lastuserlist,i)
availableproductids<-append(availableproductids,j)
lastmin<-append(lastmin,minmatrix[i,which(j == trproductlist) ])

lastmax<-append(lastmax,maxmatrix[i,which(j == trproductlist) ])


}
}
}
}
}

#Min_max_basari sonucu bulunur 
actuals_preds <- data.frame(cbind(actuals, predicteds))
min_max_accuracy <- mean (apply(actuals_preds, 1, min) / apply(actuals_preds, 1, max))  

#Urun idlerine karsilik gelen isimler dosyadan okunur ve vektore eklenir.
for (i in availableproductids){
pnames<-append(pnames,as.character(names$product_name[which(i == names$product_id)]))
}

#Min_max basari sonucu ve son hal data frame olarak ekrana bastýrýlýr
son_hal_urun<-data.frame(lastuserlist, availableproductids,pnames,actuals,predicteds,lastmin,lastmax)
print("Son Hal")
print(head(son_hal_urun))
print(min_max_accuracy )


list_user<-vector()
list_urunid<-vector()
list_urunad<-vector()


for (i in (1:length(son_hal_urun$availableproductids))){

if(son_hal_urun$predicteds[i]<=son_hal_gunler$lastmax[which(son_hal_gunler$lastuserlist==son_hal_urun$lastuserlist[i])]){

list_user<-append( list_user  ,son_hal_urun$lastuserlist[i])
list_urunid<-append( list_urunid,son_hal_urun$availableproductids[i])
list_urunad<-append( list_urunad,as.character(son_hal_urun$pnames[i]))

}
}

son_liste<-data.frame(list_user,list_urunid,list_urunad)
print(son_liste)

toplam_tutarlilik=0
for (i in son_hal_urun$lastuserlist){
toplam_tutarlilik=toplam_tutarlilik+length(which(son_liste$list_user==i))/length(which(son_hal_urun$lastuserlist==i))
}
basari_orani_liste=toplam_tutarlilik/length(son_hal_urun$lastuserlist)
print("listenin son basari orani")
print(basari_orani_liste)




